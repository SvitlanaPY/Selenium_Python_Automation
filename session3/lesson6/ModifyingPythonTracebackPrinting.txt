Modifying Python traceback printing
Examples for modifying traceback printing:

pytest --showlocals     # show local variables in tracebacks
pytest -l               # show local variables (shortcut)
pytest --tb=auto        # (default) 'long' tracebacks for the first and last entry, 
                          but 'short' style for the other entries
pytest --tb=long        # exhaustive, informative traceback formatting
pytest --tb=short       # shorter traceback format
pytest --tb=line        # only one line per failure
pytest --tb=native      # Python standard library formatting
pytest --tb=no          # no traceback at all
pytest --full-trace     # causes very long traces to be printed on error (longer than --tb=long).
                          By using this option you make sure a trace is shown. 
                          It also ensures that a stack trace is printed on KeyboardInterrupt (Ctrl+C). 
                          This is very useful if the tests are taking too long and you interrupt them with Ctrl+C 
                          to find out where the tests are hanging. 
                          By default no output will be shown (because KeyboardInterrupt is caught by pytest).
                          




Using p lists the passing tests, whilst P adds an extra section “PASSES” with those tests that passed 
but had captured output:
$ pytest -rpP

